// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  email     String   @id @db.VarChar(100)
  password  String   @db.VarChar(100)
  name      String   @db.VarChar(100)
  token     String?  @db.VarChar(200)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("user")
}

model Profile {
  firstname String   @db.VarChar(100)
  lastname  String   @db.VarChar(100)
  avatar    String?  @db.VarChar(255)
  avatar_md String?  @db.VarChar(255)
  avatar_sm String?  @db.VarChar(255)
  job       String   @db.VarChar(100)
  email     String   @id @db.VarChar(100)
  phone     String   @db.VarChar(100)
  dob       DateTime @db.Date
  address   String   @db.Text
  city      String   @db.VarChar(100)
  country   String   @db.VarChar(100)
  bio       String?  @db.Text
  web       String?  @db.VarChar(100)
  github    String?  @db.VarChar(100)
  gitlab    String?  @db.VarChar(100)
  linkedin  String?  @db.VarChar(100)
  instagram String?  @db.VarChar(100)
  facebook  String?  @db.VarChar(100)
  twitter   String?  @db.VarChar(100)
  discord   String?  @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("profile")
}

model SkillCategory {
  id        String   @id @default(uuid())
  title     String   @unique @db.VarChar(100)
  skills    Skill[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("skill_category")
}

model Skill {
  id         String          @id @default(uuid())
  title      String          @db.VarChar(100)
  svg        String?         @db.Text
  category   SkillCategory   @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now()) @updatedAt
  projects   ProjectSkills[]

  @@map("skill")
}

model Education {
  id              String   @id @default(uuid())
  institutionName String   @db.VarChar(100)
  startYear       Int      @db.Year
  endYear         Int?     @db.Year
  major           String?  @db.VarChar(100)
  degree          String?  @db.VarChar(100)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

  @@map("education")
}

model Experience {
  id          String    @id @default(uuid())
  company     String    @db.VarChar(100)
  location    String    @db.VarChar(100)
  title       String    @db.VarChar(100)
  description String    @db.Text
  startDate   DateTime  @db.Date
  endDate     DateTime? @db.Date
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@map("experience")
}

model Project {
  id          String          @id @default(uuid())
  title       String          @db.VarChar(100)
  description String          @db.Text
  url         String?         @db.VarChar(100)
  github      String?         @db.VarChar(100)
  gitlab      String?         @db.VarChar(100)
  startDate   DateTime        @db.Date
  endDate     DateTime?       @db.Date
  status      ProjectStatus?  @default(ON_PROGRESS)
  company     String?         @db.VarChar(100)
  photos      Photo[]
  skills      ProjectSkills[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt

  @@index([title])
  @@map("project")
}

enum ProjectStatus {
  ON_PROGRESS
  COMPLETE
  MAINTENANCE
}

model Photo {
  id        String   @id @default(uuid())
  path      String   @db.VarChar(255)
  path_md   String   @db.VarChar(255)
  path_sm   String   @db.VarChar(255)
  index     Int      @default(0) @db.Int
  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
  Blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    String?

  @@map("photo")
}

model ProjectSkills {
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  skill     Skill   @relation(fields: [skillId], references: [id])
  skillId   String

  @@id([projectId, skillId])
  @@map("project_skills")
}

model Blog {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(255)
  content   String   @db.Text
  photos    Photo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("blog")
}

model Log {
  id        String   @id @default(uuid())
  level     String   @db.VarChar(16)
  message   String   @db.Text
  meta      String   @db.Text
  timestamp DateTime @default(now())

  @@map("sys_logs")
}

model AccessLog {
  id          String   @id @default(uuid())
  session     String   @db.VarChar(50)
  ip          String   @db.VarChar(50)
  path        String   @db.VarChar(100)
  user_agent  String   @db.VarChar(255)
  country     String?  @db.VarChar(100)
  countryCode String?  @db.VarChar(10)
  city        String?  @db.VarChar(100)
  lat         Float?
  lon         Float?
  isMobile    Boolean
  isDesktop   Boolean
  isWindows   Boolean
  isMacOS     Boolean
  isAndroid   Boolean
  isIos       Boolean
  isFirefox   Boolean
  isEdge      Boolean
  isChrome    Boolean
  isSafari    Boolean
  timestamp   DateTime @default(now())

  @@map("access_log")
}
